name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      id: test
      run: |
        dotnet test --no-build --configuration Release --verbosity normal --logger trx --results-directory test-results --collect:"XPlat Code Coverage"
        echo "test-result=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
      
    - name: Comment Test Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results
          const testResult = '${{ steps.test.outputs.test-result }}';
          const testPassed = testResult === '0';
          
          // Find TRX files
          const testResultsDir = 'test-results';
          let testSummary = '';
          let coveragePercentage = '';
          
          if (fs.existsSync(testResultsDir)) {
            const trxFiles = fs.readdirSync(testResultsDir).filter(f => f.endsWith('.trx'));
            if (trxFiles.length > 0) {
              const trxContent = fs.readFileSync(path.join(testResultsDir, trxFiles[0]), 'utf8');
              // Simple parsing for test counts
              const passedMatch = trxContent.match(/passed="(\d+)"/);
              const failedMatch = trxContent.match(/failed="(\d+)"/);
              const totalMatch = trxContent.match(/total="(\d+)"/);
              
              const passed = passedMatch ? passedMatch[1] : '0';
              const failed = failedMatch ? failedMatch[1] : '0';
              const total = totalMatch ? totalMatch[1] : '0';
              
              testSummary = `**Tests:** ${passed}/${total} passed`;
              if (failed !== '0') {
                testSummary += `, ${failed} failed`;
              }
            }
            
            // Find and parse coverage files
            const findCoverageFiles = (dir) => {
              const files = [];
              const items = fs.readdirSync(dir, { withFileTypes: true });
              for (const item of items) {
                const fullPath = path.join(dir, item.name);
                if (item.isDirectory()) {
                  files.push(...findCoverageFiles(fullPath));
                } else if (item.name === 'coverage.cobertura.xml') {
                  files.push(fullPath);
                }
              }
              return files;
            };
            
            const coverageFiles = findCoverageFiles(testResultsDir);
            if (coverageFiles.length > 0) {
              try {
                const coverageContent = fs.readFileSync(coverageFiles[0], 'utf8');
                // Parse line-rate attribute from coverage element
                const lineRateMatch = coverageContent.match(/<coverage[^>]+line-rate="([^"]+)"/);
                if (lineRateMatch) {
                  const lineRate = parseFloat(lineRateMatch[1]);
                  const percentage = Math.round(lineRate * 100);
                  coveragePercentage = `**Coverage:** ${percentage}%`;
                }
              } catch (error) {
                console.error('Error parsing coverage file:', error);
                coveragePercentage = '**Coverage:** Unable to parse';
              }
            }
          }
          
          const status = testPassed ? '✅ **PASSED**' : '❌ **FAILED**';
          const emoji = testPassed ? '🎉' : '🚨';
          
          const comment = `${emoji} **Unit Test Results**
          
          ${status}
          
          ${testSummary || 'Test summary not available'}
          ${coveragePercentage || '**Coverage:** Not available'}
          
          ${testPassed ? 'All tests are passing! Great work!' : 'Some tests are failing. Please review the test results above.'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail job if tests failed
      if: steps.test.outputs.test-result != '0'
      run: exit 1